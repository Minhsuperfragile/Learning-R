segVar = c("age", "gender","income", "kids ", "ownHome", " subscribe")
segVarType = c(" norm", "binom", "norm", "pois", "binom", "binom")
# norm -> continuous data
# binom -> yes/no data
# poisson -> count
segNames = c("Suburb mix", "Urban hip", " Travelers", " Moving up")
segSize = c(100 , 50, 80, 70)
segMean = matrix(c(40, .5, 55000, 2, .5, .1,
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = TRUE)
?matrix
str(segMean)
View(segMean)
segMean = matrix(c(40, .5, 55000, 2, .5, .1,
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = FALSE)
segMean = matrix(c(40, .5, 55000, 2, .5, .1,
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = T)
segSDs = matrix(c( 5 , NA , 12000 , NA , NA , NA,
2 , NA , 5000 , NA , NA , NA,
8 , NA , 21000 , NA , NA , NA,
4 , NA , 10000 , NA , NA , NA), ncol = length(segVar), byrow = T)
View(segSDs)
segVar = c("age", "gender","income", "kids ", "ownHome", " subscribe")
segVarType = c("norm", "binom", "norm", "pois", "binom", "binom")
# norm -> continuous data
# binom -> yes/no data
# poisson -> count
segNames = c("Suburb mix", "Urban hip", " Travelers", " Moving up")
segSize = c(100 , 50, 80, 70)
segMean = matrix(c(40, .5, 55000, 2, .5, .1, #we need mean for those distribution function
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = T)
segSDs = matrix(c( 5 , NA , 12000 , NA , NA , NA, # continuous variables also needs standard deviation
2 , NA , 5000 , NA , NA , NA,
8 , NA , 21000 , NA , NA , NA,
4 , NA , 10000 , NA , NA , NA), ncol = length(segVar), byrow = T)
#start create random data
seg.df = NULL
set.seed(2710)
print(i)
segVar = c("age", "gender","income", "kids ", "ownHome", " subscribe")
segVarType = c("norm", "binom", "norm", "pois", "binom", "binom")
# norm -> continuous data
# binom -> yes/no data
# poisson -> count
segNames = c("Suburb mix", "Urban hip", " Travelers", " Moving up")
segSize = c(100 , 50, 80, 70)
segMean = matrix(c(40, .5, 55000, 2, .5, .1, #we need mean for those distribution function
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = T)
segSDs = matrix(c( 5 , NA , 12000 , NA , NA , NA, # continuous variables also needs standard deviation
2 , NA , 5000 , NA , NA , NA,
8 , NA , 21000 , NA , NA , NA,
4 , NA , 10000 , NA , NA , NA), ncol = length(segVar), byrow = T)
#start create random data
seg.df = NULL
set.seed(2710)
for (i in seq_along(segNames)){
print(i)
}
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=6))
?cat
cat(i, segNames[i], "\n")
for (i in seq_along(segNames)){
cat(i, segNames[i], "\n")
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)))
}
# norm -> continuous data
# binom -> yes/no data
# poisson -> count
segNames = c("Suburb mix", "Urban hip", "Travelers", "Moving up")
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)), row.names = segVar)
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)), row.names = segVar)
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)), col.names = segVar)
?data.frame
View(this.seg)
?norm
??normal distribution
?normal distribution
?rnorm
this.seg[j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
for (j in seq_along(segVarType)){
if (segVarType[j] == "norm"){
this.seg[j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
}
?binorm
??binorm
for (j in seq_along(segVarType)){
if (segVarType[j] == "norm"){
this.seg[,j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
else if ( segVarType[j] == "binorm") {
this.seg[,j] = rbinom(n=segSize[i], size=1, prob = c(segMean[i,j]))
}
}
?rpois
for (i in seq_along(segNames)){
cat(i, segNames[i], "\n")
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)))
for (j in seq_along(segVarType)){
if (segVarType[j] == "norm"){
this.seg[,j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
else if (segVarType[j] == "binom") {
this.seg[,j] = rbinom(n=segSize[i], size=1, prob = segMean[i,j])
}
else if (segVarType[j] == "pois") {
this.seg[,j] = rpois(n=segSize[j], lambda = segMean[i,j])
}
}
}
for (j in seq_along(segVar)){
if (segVarType[j] == "norm"){
this.seg[,j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
else if (segVarType[j] == "binom") {
this.seg[,j] = rbinom(n=segSize[i], size=1, prob = segMean[i,j])
}
else if (segVarType[j] == "pois") {
this.seg[,j] = rpois(n=segSize[j], lambda = segMean[i,j])
}
}
for (i in seq_along(segNames)){
cat(i, segNames[i], "\n")
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)))
for (j in seq_along(segVar)){
if (segVarType[j] == "norm"){
this.seg[,j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
else if (segVarType[j] == "binom") {
this.seg[,j] = rbinom(n=segSize[i], size=1, prob = segMean[i,j])
}
else if (segVarType[j] == "pois") {
this.seg[,j] = rpois(n=segSize[j], lambda = segMean[i,j])
}
}
seg.df = rbind(seg.df, this.seg)
}
set.seed(2710)
for (i in seq_along(segNames)){
cat(i, segNames[i], "\n")
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)))
for (j in seq_along(segVar)){
if (segVarType[j] == "norm"){
this.seg[,j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
else if (segVarType[j] == "binom") {
this.seg[,j] = rbinom(n=segSize[i], size=1, prob = segMean[i,j])
}
else if (segVarType[j] == "pois") {
this.seg[,j] = rpois(n=segSize[j], lambda = segMean[i,j])
}
}
seg.df = rbind(seg.df, this.seg)
}
?set.seed
rm(this.seg)
for (i in seq_along(segNames)){
cat(i, segNames[i], "\n")
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)))
for (j in seq_along(segVar)){
if (segVarType[j] == "norm"){
this.seg[,j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
else if (segVarType[j] == "binom") {
this.seg[,j] = rbinom(n=segSize[i], size=1, prob = segMean[i,j])
}
else if (segVarType[j] == "pois") {
this.seg[,j] = rpois(n=segSize[j], lambda = segMean[i,j])
}
}
seg.df = rbind(seg.df, this.seg)
rm(this.seg)
}
for (i in seq_along(segNames)){
cat(i, segNames[i], "\n")
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)))
for (j in seq_along(segVar)){
if (segVarType[j] == "norm"){
this.seg[,j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
else if (segVarType[j] == "binom") {
this.seg[,j] = rbinom(n=segSize[i], size=1, prob = segMean[i,j])
}
else if (segVarType[j] == "pois") {
this.seg[,j] = rpois(n=segSize[i], lambda = segMean[i,j])
}
}
seg.df = rbind(seg.df, this.seg)
#rm(this.seg)
}
View(seg.df)
rm(this.seg)
rm(this.seg, i,j)
names(seg.df) = segVar
segVar = c("age", "gender","income", "kids ", "ownHome", "subscribe")
names(seg.df) = segVar
seg.df$Segment = factor(rep(segNames, times=segSize))
seg.df$gender = factor(seg.df$gender, labels = c("ownNo","ownYes"))
#start create random data
seg.df = NULL
set.seed(2710)
for (i in seq_along(segNames)){
cat(i, segNames[i], "\n")
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)))
for (j in seq_along(segVar)){
if (segVarType[j] == "norm"){
this.seg[,j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
else if (segVarType[j] == "binom") {
this.seg[,j] = rbinom(n=segSize[i], size=1, prob = segMean[i,j])
}
else if (segVarType[j] == "pois") {
this.seg[,j] = rpois(n=segSize[i], lambda = segMean[i,j])
}
else{
print("Bad distribution type")
stop()
}
}
seg.df = rbind(seg.df, this.seg)
#rm(this.seg)
}
seg.df$gender = factor(seg.df$gender, labels = c("ownNo","ownYes"))
names(seg.df) = segVar
seg.df$Segment = factor(rep(segNames, times=segSize))
seg.df$gender = factor(seg.df$gender, labels = c("ownNo","ownYes"))
View(seg.df)
seg.df$gender = factor(seg.df$gender, labels = c("Female","Male"))
seg.df$ownHome = factor(seg.df$ownHome, labels = c("ownNO", "ownYes"))
seg.df$subscribe = factor(seg.df$subscribe, labels = c("subNo", "subYes"))
#inspect the data
summary(seg.df)
getwd()
setwd("G:/Code/R/Chapter 5")
getwd()
save(seg.df, file="seg-df-saved.RData")
rm(this.seg, i,j)
