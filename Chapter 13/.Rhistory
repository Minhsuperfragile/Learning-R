setwd("G:/Code/")
setwd("G:/Code/R/Chapter 13")
cbc.df <- read.csv2("cvc-df.csv", stringsAsFactors = T)[,-1]
cbc.df$seat = as.factor(cbc.df$seat)
cbc.df$price = as.factor(cbc.df$price)
head(cbc.df)
summary(cbc.df)
xtabs(choice ~ price , data =cbc.df)
xtabs(choice ~ cargo , data =cbc.df)
library(mlogit)
cbc.mlogit = mlogit.data(data = cbc.df, choice='choice', shape='long',
varying = c("carpool", 'seat', 'cargo', 'eng','price'),
alt.levels = paste('pos', 1:3),
id.var = "resp.id")
m1 = mlogit(choice ~ 0 + seat + cargo + eng + price , data = cbc.mlogit)
summary(m1)
m2 = mlogit(choice ~ 1 + seat + cargo + eng + price, data=cbc.mlogit)
summary(m2)
lrtest(m1,m2)
m3 = mlogit(choice ~ 0 + seat + cargo + eng + as.numeric(as.character(price)),
data = cbc.mlogit)
summary(m3)
lrtest(m1,m3)
#willingness to pay
coef(m1)["cargo3ft"]/(-coef(m1)["price"]/1000)
#choice share
predict.mn1 = function(model, data) {
#function to predict shares from a multinomial logit mode
#model: mlogit object returned by mlogit
#data: a data frame containing all the set of designs for which you want to
#predict shares. Same format as the data used to estimate model.
data.model = model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
utility = data.model %*% model$coef
share = exp(utility) / sum(exp(utility))
cbind(share, data)
}
attrib <- list (seat = c("6", "7", "8"),
cargo = c("2ft", "3ft"),
eng = c("gas", "hyb", "elec"),
price = c("30", "35", "40"))
(new.data = expand.grid(attrib)[c(8,1,3,41,49,26), ])
predict.mn1(m1, new.data) #probabilities of attributes combinations
#sensitivity plot
sensitivity.mnl = function(model, attrib, base.data, competitor.data){
# Function for creating data for a share-sensitivity chart
# model : mlogit object
# attrib : list of vectors with attribute levels
# base.data : data frame containing baseline design
# competitor.date: data frame containing design of competitive set
data = rbind(base.data, competitor.data)
base.share = predict.mn1(model, data)[1,1]
share = NULL
for (a in seq_along(attrib)){
for (i in attrib[[a]]) {
data[1,] = base.data
data[1,a] = i
share = c(share, predict.mn1(model, data)[1,1])
}
}
data.frame(level=unlist(attrib), share=share, increase=share-base.share)
}
base.data = expand.grid(attrib)[c(8), ]
competitor.data = expand.grid(attrib)[c(1,3,41,49,26),]
(tradeoff = sensitivity.mnl(m1, attrib, base.data, competitor.data))
# mixed logit model
m1.rpar = rep("n", length = length(m1$coefficients))
names(m1.rpar) = names(m1$coefficients)
m1.rpar
m1.hier = mlogit(choice ~ 0 + seat + eng + cargo + price,
data = cbc.mlogit,
panel = T, rpar = m1.rpar, correlation = F)
summary(m1.hier)
stdev(m1.hier)
# with correlation
m2.hier = mlogit(choice ~ 0 + seat + eng + cargo + price,
data = cbc.mlogit,
panel = T, rpar = m1.rpar, correlation = T)
summary(m2.hier)
cov2cor(cov.mlogit(m2.hier))
predict.hier.mnl = function(model, data, nresp=1000) {
# Function to predict shares of a hierarchical mnl
# model: mlogit object
# data: a data frame containing the set of design
# This code assumes all model parameters are random
data.model = model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
coef.Sigma = cov.mlogit(model)
coef.mu = model$coef[1:dim(coef.Sigma)[1]]
draws = mvrnorm(n=nresp, coef.mu, coef.Sigma)
shares = matrix(NA, nrow = nresp, ncol = nrow(data))
for (i in 1:nresp) {
utility = data.model %*% draws[i,]
share = exp(utility)/sum(exp(utility))
shares[i,] = share
}
cbind (colMeans(shares), data )
}
predict.hier.mnl(m2.hier,new.data)
library(MASS)
predict.hier.mnl(m2.hier,new.data)
# Bayesian model
choice = rep(0, nrow (cbc.df))
choice[cbc.df[,"alt"]==1] = cbc.df[cbc.df[,"choice"]==1,"alt"]
head(choice)
cbc.coded = model.matrix(~ seat + eng + cargo + price , data = cbc.df)
cbc.coded = cbc.coded[, -1] #
choicemodelr.data = cbind(cbc.df[,1:3], cbc.coded , choice)
head(choicemodelr.data)
library(ChoiceModelR)
View(cbc.df)
carpool = cbc.df$carpool[cbc.df$ques==1 & cbc.df$alt==1] == "yes"
carpool = as.numeric(carpool)
choicemodelr.demos = as.matrix(carpool, nrow=length(carpool))
str(choicemodelr.demos)
hb.post = choicemodelr(data = choicemodelr.data, xcoding=rep(1,7),
demos=choicemodelr.demos,
mcmc = list(R=20000, use=10000),
options=list(save=TRUE))
?choicemodelr
hb.post = choicemodelr(data = choicemodelr.data, xcoding=rep(1,7),
demos=choicemodelr.demos,
mcmc = list(R=20000, use=10000),
options=list(save=TRUE), directory = "G:/Code/R")
names(hb.post)
hb.post$compdraw
hb.post$compdraw[[567]]$mu
hb.post$deltadraw[567,]
hb.post$compdraw[[567]]$rooti
crossprod(hb.post$compdraw[[567]]$rooti)
head(hb.post $ betadraw[, ,567])
str(hb.post$betadraw)
str(head(hb.post $ betadraw[, ,567]))
beta.post.mean = apply(hb.post$betadraw, 1:2, mean )
head(beta.post.mean)
beta.post.q05 = apply(hb.post$betadraw, 1:2, quantile, probs=c(0.05))
beta.post.q95 = apply(hb.post$betadraw, 1:2, quantile, probs=c(0.95))
rbind(q05 = beta.post.q05[1,], mean=beta.post.mean[1,], q95=beta.post.q95[1,])
predict.hb.mnl = function(betadraws, data){
# function to predict shares from a hierarchical multinomial logit model
# model: mlogit object
# data: a data frame containing the set of design
data.model = model.matrix(~ seat + eng + cargo + price, data=data)
data.model = data.model[,1]
nresp = dim(betadraws)[1]
ndraws = dim(hb.post$betadraw)[3]
shares = array(dim=c(nresp, nrow(data), ndraws))
for (d in 1:ndraws){
for (i in 1:nresp){
utility = data.model %*% betadraws[1,,d]
shares[1,,d] = exp(utility) / sum(exp(utility))
}
}
}
predict.hb.mnl = function(betadraws, data){
# function to predict shares from a hierarchical multinomial logit model
# model: mlogit object
# data: a data frame containing the set of design
data.model = model.matrix(~ seat + eng + cargo + price, data=data)
data.model = data.model[,1]
nresp = dim(betadraws)[1]
ndraws = dim(hb.post$betadraw)[3]
shares = array(dim=c(nresp, nrow(data), ndraws))
for (d in 1:ndraws){
for (i in 1:nresp){
utility = data.model %*% betadraws[1,,d]
shares[1,,d] = exp(utility) / sum(exp(utility))
}
}
shares.agg = apply(shares, 2:3, mean)
cbind(share=apply(shares.agg, 1, mean),
pct = t(apply(shares.agg, 1, quantile, probs=c(0.05, 0.95))),
data)
}
predict.hb.mnl(hb.post$betadraw, new.data)
sportscar <- read.csv("https://goo.gl/8g7vtT")
rm(list=ls())
sportscar <- read.csv("https://goo.gl/8g7vtT")
write.csv(sportscar, file="sportcar.csv")
sportscar <- read.csv("sportcar.csv", stringsAsFactors = T)[,-1]
summary(sportscar)
sportscar$seat = as.factor(sportscar$seat)
sportscar$price = as.factor(sportscar$price)
summary(sportscar)
tail(sportscar)
xtabs(choice ~ trans, data=sportscar)
sportscar.mlogit.data = mlogit.data(data = sportscar, choice='choice', shape='long',
varying = c("seat",'trans','convert','price'),
alt.levels = paste('pos', 1:3),
id.var = 'resp.id')
sportscar.mlogit.data = mlogit.data(data = sportscar, choice='choice', shape='long',
varying = 5:8, alt.var = 'alt')
m1 = mlogit(choice ~ 0 + seat + trans + convert + price , data = sportscar.mlogit.data)
summary(m1)
coef(m1)["convertyes"]/(-coef(m1)["price"]/1000)
coef(m1)
coef(m1)["convertyes"]/(-coef(m1)["price35"]/1000)
coef(m1)["convertyes"]/(-coef(m1)["price40"]/1000)
sportscar <- read.csv("sportcar.csv", stringsAsFactors = T)[,-1]
sportscar$seat = as.factor(sportscar$seat)
sportscar.mlogit.data = mlogit.data(data = sportscar, choice='choice', shape='long',
varying = 5:8, alt.var = 'alt')
m1 = mlogit(choice ~ 0 + seat + trans + convert + price , data = sportscar.mlogit.data)
summary(m1)
coef(m1)["convertyes"]/(-coef(m1)["price"]/1000)
#choice share
predict.mn1 = function(model, data) {
#function to predict shares from a multinomial logit mode
#model: mlogit object returned by mlogit
#data: a data frame containing all the set of designs for which you want to
#predict shares. Same format as the data used to estimate model.
data.model = model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
utility = data.model %*% model$coef
share = exp(utility) / sum(exp(utility))
cbind(share, data)
}
newcars <- data.frame (seat= factor (c("2","4", "5")),
trans= factor (c("manual", " automatic", "automatic")),
convert= factor (c("no", "yes", "no")),
price=c(40, 37, 35))
predict.mn1(m1, newcars)
predict.mnl <- function(model, data) {
# Function for predicting shares from a multinomial logit model
# model: mlogit object returned by mlogit()
# data: a data frame containing the set of designs for which you want to
#       predict shares.  Same format as the data used to estimate model.
data.model <- model.matrix(update(model$formula, 0 ~ .), data = data)[,-1]
utility <- data.model%*%model$coef
share <- exp(utility)/sum(exp(utility))
cbind(share, data)
}
predict.mnl(m1, newcars)
newcars <- data.frame (seat= factor (c("2","4", "5")),
trans= factor (c("manual", "auto", "auto")),
convert= factor (c("no", "yes", "no")),
price=c(40, 37, 35))
predict.mn1(m1, newcars)
#sensitivity plot
sensitivity.mnl = function(model, attrib, base.data, competitor.data){
# Function for creating data for a share-sensitivity chart
# model : mlogit object
# attrib : list of vectors with attribute levels
# base.data : data frame containing baseline design
# competitor.date: data frame containing design of competitive set
data = rbind(base.data, competitor.data)
base.share = predict.mn1(model, data)[1,1]
share = NULL
for (a in seq_along(attrib)){
for (i in attrib[[a]]) {
data[1,] = base.data
data[1,a] = i
share = c(share, predict.mn1(model, data)[1,1])
}
}
data.frame(level=unlist(attrib), share=share, increase=share-base.share)
}
attrib <- list(seat = c("2", "4", "5"),
trans = c("manual", "auto"),
convert = c("no", "yes"),
price = c(30, 35, 40))
sensitivity.mnl(m1, attrib, base.data = newcars[1],newcars[2:] )
sensitivity.mnl(m1, attrib, base.data = newcars[1],newcars[2:3] )
sensitivity.mnl(m1, attrib, base.data = newcars[1],newcars[c(2,3)] )
sensitivity.mnl(m1, attrib, base.data = newcars[1,],newcars[c(2,3),] )
summary(sportscar)
racer.cars = sportscar[sportscar$segment == "racer", ]
racer.mlogit.data = mlogit.data(data = racer.cars, choice='choice', shape='long',
varying = 5:8, alt.var = 'alt')
m2 = mlogit(choice ~ 0 + seat + trans + convert + price , data = racer.mlogit.data)
predict.mnl(m2, newcars)
predict.mnl(m1, newcars)
m1.hier = mlogit(choice ~ 0 + seat + trans + convert + price,
data = sportscar.mlogit.data,
panel = T, rpar = m1.rpar, correlation = F)
m1.rpar = rep("n", length = length(m1$coefficients))
names(m1.rpar) = names(m1$coefficients)
m1.rpar
m1.hier = mlogit(choice ~ 0 + seat + trans + convert + price,
data = sportscar.mlogit.data,
panel = T, rpar = m1.rpar, correlation = F)
# Hierarchical model
my_rpar <- rep("n", length(m1$coefficients))
names(my_rpar) <- names(m1$coefficients)
m3 <- mlogit(choice ~ 0 + seat + trans + convert + price,
data=sportscar.mlogit, rpar=my_rpar,
correlation=TRUE)
m3 <- mlogit(choice ~ 0 + seat + trans + convert + price,
data=sportscar.mlogit.data, rpar=my_rpar,
correlation=TRUE)
my_rpar
m1.hier = mlogit(choice ~ 0 + seat + trans + convert + price,
data = sportscar.mlogit.data,
, rpar = m1.rpar, correlation = T)
summary(m1.hier)
stdev(m1.hier)
cov2cor(cor(m1.hier))
cov2cor(cov.mlogit(m1.hier))
