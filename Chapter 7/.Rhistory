segVar = c("age", "gender","income", "kids ", "ownHome", " subscribe")
segVarType = c(" norm", "binom", "norm", "pois", "binom", "binom")
# norm -> continuous data
# binom -> yes/no data
# poisson -> count
segNames = c("Suburb mix", "Urban hip", " Travelers", " Moving up")
segSize = c(100 , 50, 80, 70)
segMean = matrix(c(40, .5, 55000, 2, .5, .1,
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = TRUE)
?matrix
str(segMean)
View(segMean)
segMean = matrix(c(40, .5, 55000, 2, .5, .1,
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = FALSE)
segMean = matrix(c(40, .5, 55000, 2, .5, .1,
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = T)
segSDs = matrix(c( 5 , NA , 12000 , NA , NA , NA,
2 , NA , 5000 , NA , NA , NA,
8 , NA , 21000 , NA , NA , NA,
4 , NA , 10000 , NA , NA , NA), ncol = length(segVar), byrow = T)
View(segSDs)
segVar = c("age", "gender","income", "kids ", "ownHome", " subscribe")
segVarType = c("norm", "binom", "norm", "pois", "binom", "binom")
# norm -> continuous data
# binom -> yes/no data
# poisson -> count
segNames = c("Suburb mix", "Urban hip", " Travelers", " Moving up")
segSize = c(100 , 50, 80, 70)
segMean = matrix(c(40, .5, 55000, 2, .5, .1, #we need mean for those distribution function
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = T)
segSDs = matrix(c( 5 , NA , 12000 , NA , NA , NA, # continuous variables also needs standard deviation
2 , NA , 5000 , NA , NA , NA,
8 , NA , 21000 , NA , NA , NA,
4 , NA , 10000 , NA , NA , NA), ncol = length(segVar), byrow = T)
#start create random data
seg.df = NULL
set.seed(2710)
segVar = c("age", "gender","income", "kids ", "ownHome", "subscribe")
segVarType = c("norm", "binom", "norm", "pois", "binom", "binom")
# norm -> continuous data
# binom -> yes/no data
# poisson -> count
segNames = c("Suburb mix", "Urban hip", "Travelers", "Moving up")
segSize = c(100 , 50, 80, 70)
segMean = matrix(c(40, .5, 55000, 2, .5, .1, #we need mean for those distribution function
24, .7, 21000, 1, .2, .2,
58, .5, 64000, 0, .7, .05,
36, .3, 52000, 2, .3, .2), ncol = length(segVar), byrow = T)
segSDs = matrix(c( 5 , NA , 12000 , NA , NA , NA, # continuous variables also needs standard deviation
2 , NA , 5000 , NA , NA , NA,
8 , NA , 21000 , NA , NA , NA,
4 , NA , 10000 , NA , NA , NA), ncol = length(segVar), byrow = T)
#start create random data
seg.df = NULL
set.seed(2710)
for (i in seq_along(segNames)){
cat(i, segNames[i], "\n")
this.seg = data.frame(matrix(data=NA, nrow=segSize[i], ncol=length(segVar)))
for (j in seq_along(segVar)){
if (segVarType[j] == "norm"){
this.seg[,j] = rnorm(n=segSize[i], mean=segMean[i,j], sd=segSDs[i,j])
}
else if (segVarType[j] == "binom") {
this.seg[,j] = rbinom(n=segSize[i], size=1, prob = segMean[i,j])
}
else if (segVarType[j] == "pois") {
this.seg[,j] = rpois(n=segSize[i], lambda = segMean[i,j])
}
else{
print("Bad distribution type")
stop()
}
}
seg.df = rbind(seg.df, this.seg)
#rm(this.seg)
}
rm(this.seg, i,j)
names(seg.df) = segVar
seg.df$Segment = factor(rep(segNames, times=segSize))
seg.df$gender = factor(seg.df$gender, labels = c("Female","Male"))
seg.df$ownHome = factor(seg.df$ownHome, labels = c("ownNO", "ownYes"))
seg.df$subscribe = factor(seg.df$subscribe, labels = c("subNo", "subYes"))
#inspect the data
summary(seg.df)
aggregate(seg.df, list(seg.df$Segment), mean)
warning()
aggregate(seg.df$income, list(seg.df$Segment), mean)
warnings()
aggregate(seg.df, list(seg.df$Segment), mean)
warnings()
seg.income.mean = aggregate(seg.df$income, list(seg.df$Segment), mean) # this have an advantage compare to by because it return a data frame
seg.df$segIncome = seg.income.mean[seg.df$Segment, 2]
View(seg.df)
?index
??index
seg.income.mean[seg.df$Segment,2]
seg.income.mean[segNames,2]
View(seg.income.mean)
aggregate(income ~ Segment, data=seg.df, mean)
aggregate(income ~ gender, data=seg.df, mean)
seg.df$segIncome = NULL
aggregate(income ~ Segment + ownHome, data=seg.df , mean)
with(seg.df, table(Segment, ownHome))
with(seg.df, table(kids, Segment))
segVar = c("age", "gender","income", "kids", "ownHome", "subscribe")
names(seg.df) = segVar
with(seg.df, table(kids, Segment))
segVar = c("age", "gender","income", "kids", "ownHome", "subscribe","Segment")
names(seg.df) = segVar
with(seg.df, table(kids, Segment))
#count how many kids
xtab(kids ~ Segment, data=seg.df)
#count how many kids
xtabs(kids ~ Segment, data=seg.df)
install.packages("lattice")
#plot proportion
library(lattice)
histogram(~subcribe | Segment, data=seg.df)
histogram(~subscribe | Segment, data=seg.df)
#plot real counts
histogram(~subscribe | Segment, data=seg.df,
type="count", layout=c(4,1), col=c("burlywood", "darkolivegreen"))
#proportion with table
prop.table(table(seg.df$subscribe, seg.df$Segment),margin = 2)
#plot proportion with a bar chart
barchart(prop.table(table(seg.df$subscribe, seg.df$Segment),margin = 2))
#plot proportion with a bar chart
barchart(prop.table(table(seg.df$subscribe, seg.df$Segment),margin = 2)[2,])
#plot proportion with a bar chart
barchart(prop.table(table(seg.df$subscribe, seg.df$Segment),margin = 2)[2,],
xlab="Proportion of subscribed in each segment")
#plot continuous variables (income by segment) -> we plot mean value
seg.income.mean
#plot continuous variables (income by segment) -> we plot mean value
seg.income.mean = aggregate(income ~ Segment, data=seg.df, mean)
#plot continuous variables (income by segment) -> we plot mean value
seg.income.mean
barchart(income ~ Segment, data=seg.income.mean, col='grey')
seg.income.mean.2 = aggregate(income ~ Segment + ownHome, data=seg.df, mean)
barchart(income ~ Segment + ownHome, data=seg.income.mean.2, col=c('grey','grey50'))
barchart(income ~ Segment, data=seg.income.mean.2, groups = ownHome)
barchart(income ~ Segment, data=seg.income.mean.2, groups = ownHome, auto.key=TRUE)
barchart(income ~ Segment, data=seg.income.mean.2, groups = ownHome, auto.key=TRUE,
par.settings=simpleTheme(col=terrain.colors(2)))
#box plot -> to see the distribution (quantile)
boxplot(income~Segment, data=seg.df, yaxt='n', ylab="Income")
#box plot -> to see the distribution (quantile)
boxplot(income~Segment, data=seg.df, yaxt='n', ylab="Income", horizontal = TRUE)
#box plot -> to see the distribution (quantile)
boxplot(income~Segment, data=seg.df, yaxt='n', ylab="Income")
ax.seq <- seq(from =0, to=120000 , by=20000)
axis(side=2, at=ax.seq, labels = paste(ax.seq/1000, "k", sep=" "), las=1)
#a better box plot
bwplot(Segment ∼ income , data=seg.df , horizontal=TRUE , xlab = "Income")
#a better box plot
bwplot(Segment ∼ income , data=seg.df , horizontal=TRUE , xlab = "Income")
#a better box plot
bwplot(Segment ~ income , data=seg.df , horizontal=TRUE , xlab = "Income")
#conditioning with  own home
bwplot(Segment ~ income |ownHome , data=seg.df , horizontal=TRUE , xlab = "Income")
gc()
getwd()
setwd("G:/Code/R")
setwd("G:/Code/R/Chapter 7")
getwd()
hotel.df <- read.csv("https://goo.gl/oaWKgt")
write.csv(hotel.df, file="hotel-df-saved.csv")
#visualize the distributions of the variables
summary(hotel.df)
library(car)
scatterplotMatrix(hotel.df)
scatterplotMatrix(hotel.df[,c(-25,-21)])
hotel.df$visitPurpose = factor(gotel.df$visitPurpose)
hotel.df$eliteStatus = factor(hotel.df$eliteStatus)
hotel.df$visitPurpose = factor(hotel.df$visitPurpose)
# nights stayed, distance traveled and food spend per night have a left skew dist
# -> log distribution
hotel.df$logdist = log(hotel.df$distanceTraveled)
hotel.df$logNS = log(hotel.df$nightsStayed)
hotel.df$logFood = log(hotel.df$avgFoodSpendPerNight)
scatterplotMatrix(hotel.df[,c(26,27,28)])
hotel.df$logFood = log(hotel.df$avgFoodSpendPerNight+1)
scatterplotMatrix(hotel.df[,c(26,27,28)])
scatterplotMatrix(hotel.df[,c(1:18)]) #satisfaction
scatterplotMatrix(hotel.df[,c(19,20,22,23,24)]) #other
corrplot.mixed(cor(hotel.df[,c(1:18)]), upper="ellipse" )
#correlation pattern
library(corrplot)
corrplot.mixed(cor(hotel.df[,c(1:18)]), upper="ellipse" )
install.packages("corrplot")
#correlation pattern
library(corrplot)
corrplot.mixed(cor(hotel.df[,c(1:18)]), upper="ellipse" )
#There is no high correlation (>0.8), this data is acceptable
#The highest correlation with overall is front staff
plot(satOverall ~ satFrontStaff, data=hotel.df)
m1 = lm(satOverall ~ satFrontStaff, data=hotel.df )
abline(m1, col="blue")
corrplot.mixed(cor(hotel.df), upper="ellipse" )
corrplot.mixed(cor(hotel.df[,c(-21,-25)]), upper="ellipse" )
hist(log(hotel.df$distanceTraveled))
hist(hotel.df$nightsStayed)
hist(log(hotel.df$nightsStayed))
hist(hotel.df$avgFoodSpendPerNight)
hist(log(hotel.df$avgFoodSpendPerNight))
hotel.df.tr <- hotel.df
hotel.df.tr$distanceTraveled     <- log(hotel.df$distanceTraveled)
hotel.df.tr$nightsStayed         <- log(hotel.df$nightsStayed)
hotel.df.tr$avgFoodSpendPerNight <- log(hotel.df$avgFoodSpendPerNight + 1)
par(mfrow=c(1, 1))
scatterplotMatrix(hotel.df.tr[ , 19:25])
# 3. Consider just the three items for cleanliness (satCleanRoom, satCleanBath, and satCleanCommon).
#    What are the correlation coefficients among those items?
#    Is there a better measure than Pearson's r for those coefficients, and why? Does it make a difference in these data?
#    (Note: consider the notes in Section 4.6.2).
cor(hotel.df[ , 1:3])
library(psych)
polychoric(with(hotel.df, cbind(satCleanRoom, satCleanBath, satCleanCommon)))
#check the relationship between sat overall and sat perk
plot(satOverall ~ satPerk, data=hotel.df)
#check the relationship between sat overall and sat perk
plot(satOverall ~ satPerks, data=hotel.df)
abline(m1, col="blue")
cor(hotel.df$satPerks, hotel.df$satOver)
cor(hotel.df$satPerks, hotel.df$satOverall)
#control the model to fit with sat city and sat front staff
m1 = lm(satOverall ~ satFrontStaff + satCity, data=hotel.df)
m1.coeff
m1.coef
m1.coefficients
m1$coefficients
#control the model to fit with sat city and sat front staff
m1 = lm(satOverall ~satPerks satFrontStaff + satCity, data=hotel.df)
#control the model to fit with sat city and sat front staff
m1 = lm(satOverall ~ satPerks + satFrontStaff + satCity, data=hotel.df)
m1$coefficients
summary(m1)
hotel.GP = hotel.df[hotel.df$eliteStatus %in% c("Gold", "Platinum"),]
unique(hotel.GP$eliteStatus)
corrplot.mixed(cor(hotel.GP[,c(1:18)]), upper="ellipse")
#perks and sat recognition has the highest correlation -> we should invest in perks
m2 = lm(satRecognition ~ satCleanRoom + satFrontStaff + satPoints+ satPerks,
data= hotel.GP)
summary(m2)
#investigate with food per night ~ elite status + sat dining price
m3 = lm(avgFoodSpendPerNight ~ eliteStatus + satDiningPrice, data=hotel.df)
summary(m3)
View(hotel.df)
m4 = lm(satDinnerPrice ~ avgFoodSpendPerNight , data=hotel.df)
m4 = lm(satDinningPrice ~ avgFoodSpendPerNight , data=hotel.df)
m4 = lm(satDiningPrice ~ avgFoodSpendPerNight , data=hotel.df)
summary(m4)
#investigate with food per night ~ elite status + sat dining price
m3 = lm(logFood ~ eliteStatus + satDiningPrice, data=hotel.df)
summary(m3)
m4 = lm(avgFoodSpendPerNight ~ satDiningPrice  , data=hotel.df)
summary(m4)
#plot the predicted food spend per night as a function of night stayed
m5 = lm(logFood ~ nightsStayed ,data=hotel.df)
plot(jitter(hotel.df$nightsStayed) , jitter(m5(hotel.df$night)))
plot(jitter(hotel.df$nightsStayed) , jitter(predict(m5,hotel.df$nightsStayed)))
#plot the predicted food spend per night as a function of night stayed
m5 = lm(logFood ~ logNS ,data=hotel.df)
plot(jitter(exp(hotel.df$logNS)) , jitter(exp(predict(m5,hotel.df$logNS)))
plot(jitter(exp(hotel.df$logNS)) , jitter(exp(predict(m5,hotel.df$logNS)))
plot(jitter(exp(hotel.df$logNS)) , jitter(exp(predict(m5,hotel.df$logNS))))
predict(m5,hotel.df$logNS)
fitted(m5, hotel.df$logNS)
plot(jitter(exp(hotel.df$logNS)) , jitter(exp(fitted(m5,hotel.df$logNS))))
plot(jitter(exp(hotel.df$logNS)) , jitter(exp(fitted(m5,hotel.df$logNS)))
xlab = "Night stayed", ylab = "Prediction on food spend ")
plot(jitter(exp(hotel.df$logNS)) , jitter(exp(fitted(m5,hotel.df$logNS))),
xlab = "Night stayed", ylab = "Prediction on food spend ")
hotel.food.lm.bynights <- lm(avgFoodSpendPerNight ~ nightsStayed, data=hotel.df.tr)
plot(jitter(exp(hotel.df.tr$nightsStayed)), jitter(exp(fitted(hotel.food.lm.bynights))),
xlab="Nights stayed", ylab="Mean Food Spend per Night ($)")
#check interaction with elite groups
m6 = lm(logFood ~ logNS + eliteStatus, data=hotel.df)
summary(m6)
#check interaction with elite groups
m6 = lm(logFood ~ logNS:eliteStatus, data=hotel.df)
summary(m6)
#check interaction with elite groups
m6 = lm(logFood ~ logNS*eliteStatus, data=hotel.df)
summary(m6)
#limit the data to only group platinum
m6 = lm(logFood ~ logNS, data=hotel.df[hotel.df$eliteStatus == "Platinum",])
summary(m6)
summary(m5)
plot(jitter(exp(hotel.df$logNS)) , jitter(exp(fitted(m5,hotel.df$logNS))),
xlab = "Night stayed", ylab = "Prediction on food spend ")
points(jitter(exp(hotel.df$logNS)), jitter(exp(fitted(m6,hotel.df$logNS))))
points(jitter(exp(hotel.df$logNS[hotel.df$eliteStatus == "Platinum"])),
jitter(exp(fitted(m6,hotel.df$logNS))))
points(jitter(exp(hotel.df$logNS[hotel.df$eliteStatus == "Platinum"])),
jitter(exp(fitted(m6,hotel.df$logNS))), col="blue")
#limit the data to only group platinum, and plot the difference
m6 = lm(logFood ~ logNS, data=hotel.df[hotel.df$eliteStatus == "Platinum",])
rm(list=ls())
